conf package contains 3 main routines:
* conf::load_from_file - to load a conf from a file
* conf::load_from_fh - to load a conf from an open file handler
* conf::load_from_str - to load a conf from a string

Each routine returns a parsed conf.

Synopsis
========
  load_from_file [-hd STR] FILE_NAME
  load_from_fh [-hd STR] CHAN
  load_from_str [-hd STR] CONF_STR

Where parameters:
  -hd  - use STR as hierarchy delimiter in key names and group names

Conf syntax
===========
Conf consists from key-value pairs, which can be grouped in sections. Whitespaces
are ignored. Comment can be started by # symbols at almost any
place(excluding # inside a quoted string). Key, value and section
name can consist of any chars exclude any space chars, '=', '#', '"', '[', ']', '{', '}'. If
there are any of these chars in a key, value or section name, then it should whole
key, value or section name must be enclosed in double quotes.

ABNF of conf syntax:
```
conf = *(key-value / group / WSP)
key-value = WSP0 key WSP0 "=" WSP0 (value / list) WSP0
key = word / str
value = word / str
list = "{" *((word / str / list) WSP) "}"
group = "[" (word / str) "]" *conf / (word / str) "{" *conf "}"
word = (%d33 / %d36-60 / %d62-90 / %d92 / %d94-122 / %d124 / %d126 - %d255)
        ; all except any space (belong to [:space:] char class), =, #, ",
        ; [, ], {, }
str = DQUOTE %d01-%d255 DQUOTE
        ; any chars in double quotes, where double quotes inside string
        ; can be escaped with \ char
WSP0 = *WSP
WSP = SP / HTAB / CR / LF / CRLF / AND_ANY_UNICODE_WHITESPAC_CHAR
```

Examples
========
Simple conf:
```
k1=v1
k2=v2
```
loaded with `load_from_file my.conf` returns:

{k1 v1 k2 v2}

Conf with sections:
```
k1 = v1
[g1]
k2 = v2
[g2]
k3 = v3
```
loaded with `load_from_file my.conf` returns:

k1 v1 g1 {k2 v2} g2 {k3 v3}

Conf with nested sections:
```
k1 = v1
g1 {
  k2 = v2
  g2 {
    k3 = v3
  }
}
```
loaded with `load_from_file my.conf` returns:

k1 v1 g1 {k2 v2 g2 {k3 v3}}

Conf with hierarchy delimiter specified:
```
g1.k1 = {1 2 3 {4 5}}
g2.k2 = v2
```
loaded with `load_from_file -hd . my.conf` returns:

g1 {k1 {1 2 3 {4 5}}} g2 {k2 v2}

Conf monster:
```
g1.k1 = {1 2 3 {4 5}}
[g2]
k2 = v2
k3.k4 = v3
[g2.g3]
k4 = v4
g4.g5 {
  k5.k6 = v6
  [g7.g8]
  k7.k8 = v7
}
```
loaded with `load_from_file -hd . my.conf` returns:

g1 {k1 {1 2 3 {4 5}}} g2 {k2 v2 k3 {k4 v3} g3 {k4 v4 g4 {g5 {k5 {k6 v6}}} g7 {g8 {k7 {k8 v7}}}}}

Conf with comments:
```
# here is some comments
k = v
k1 = v1 # another comments
k2 = v2
k3 = # this is k3
        v3 # this is k3 value
# end of file
```
loaded with `load_from_file -hd . my.conf` returns:

k v k1 v1 k2 v2 k3 v3

Errors
======

conf lines: from 3 to 3
missing value to go with key

  You try to assign a group to a existent key with a non-group value.
  E.g.:
    ```
    k1 = v1
    [k1]
    k2 = v2
    ```

parse error at 1 line: unexpected token sequence at 1 line: 'k2'#6(L1) 'v2'#6(L1)
 want: KEY = VAL or KEY = { or GROUP_NAME { or } or [GROUP_NAME]

  There is parser error at line 1 for token sequence started at line 1.
  First token is 'k2' at line 1 (6 - is a token code, you don't need it),
  second token is 'v2' at line 1. E.g.:
    ```
    k2 v2
    ```
parse error at 1 line: unexpected token sequence at 1 line: 'k2'#6(L1) '='#1(L1)
 want: KEY = VAL or KEY = { or GROUP_NAME { or } or [GROUP_NAME]
possible unclosed quotes at 1 line

  Double quotes is opened, but is not closed. E.g.:
    ```
    k2 = "v2
    ```